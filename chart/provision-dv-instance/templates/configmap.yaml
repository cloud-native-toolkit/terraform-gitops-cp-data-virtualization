apiVersion: v1
data:
  create_dv_instance.sh: "#!/usr/bin/env bash\n\n################################################################################\n#\n# Licensed Materials - Property of IBM\n#\n# \"Restricted Materials of IBM\"\n#\n# (C) COPYRIGHT IBM Corp. 2018 All Rights Reserved.\n#\n# US Government Users Restricted Rights - Use, duplication or\n# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.\n#\n################################################################################\n\n#Global Static variables\nVALUE_INT_YES=0\nVALUE_INT_NO=1\n\nCPD_RELEASE_CURRENT=\"4.0.4\"\nCPD_RELEASE=\"${CPD_RELEASE_CURRENT}\"\nDV_RELEASE=\"${CPD_RELEASE}\"\nDV_CUSTOM_RELEASE=\"\"\n\nisIAMEnabled=\"false\"\n\n#lite custom install reuqires three namespaces\n# ibm-common-services that hosts bedrock\n# cpd-operators that hosts all cp4d operators including ibmcpd\n# $SERVICE_INSTANCE_NAMESPACE that hosts cp4d pods\nZEN_OPERATORS_NAMESPACE=\"${ZEN_OPERATORS_NAMESPACE}\"\nSERVICE_INSTANCE_NAMESPACE=\"${SERVICE_INSTANCE_NAMESPACE}\"\n\nCP4D_WEB_URL=\"ibm-nginx-svc\"\nCP4D_WEB_URL_USERNAME=\"${CP4D_WEB_URL_USERNAME}\"\nCP4D_WEB_URL_PASSWORD=\"${CP4D_WEB_URL_PASSWORD}\"\n\nIAMINTEGRATION=\"false\"\n\n#Deployment/Provisioning parameters\nPROVISION_VIA_CR=${VALUE_INT_NO}\nIS_DV=${VALUE_INT_NO}\n\n#DV specific paramters defaults  - can be overridden by user parms\nMEMORY_REQUEST_SIZE=\"${MEMORY_REQUEST_SIZE}\"\nCPU_REQUEST_SIZE=\"${CPU_REQUEST_SIZE}\"\nPERSISTENCE_STORAGE_CLASS=\"${PERSISTENCE_STORAGE_CLASS}\"\nPERSISTENCE_STORAGE_SIZE=\"${PERSISTENCE_STORAGE_SIZE}\"\nCACHING_STORAGE_CLASS=\"${CACHING_STORAGE_CLASS}\"\nCACHING_STORAGE_SIZE=\"${CACHING_STORAGE_SIZE}\"\nWORKER_STORAGE_CLASS=\"${WORKER_STORAGE_CLASS}\"\nWORKER_STORAGE_SIZE=\"${WORKER_STORAGE_SIZE}\"\nDV_INSTALL_JSON_FILE_PATH=\"newdv.json\"\nMNTDIR=\"/scripts\"\nCMDDIR=\"/temp\"\n\nUsage (){\ncat << EOF\nDETAILED OPTIONS HELP\n\n #General Install Options\n   --service-instance-namespace\n   Service instance namespace. \"liteproject\" by default.\n   --cpd-release\n   the release of CPD that determines which branch of cpd-case repo we download CASE bundle tar balls\n\n #General Access Parameters\n   --cp4d-web-username\n   Username for cp4d web account, defaults to openshift username\n   --cp4d-web-password\n   Password for cp4d web account, defaults to openshift password\n\n # DV provisioning Parameters\n   --memory-request-size\n   Requested memory size. Use \"8Gi\" by default.\n   --cpu-request-size\n   Requested CPU size. Use \"4\" by default.\n   --persistence-storage-class\n   Persistence storage class. Use \"nfs-client\" by default.\n   --persistence-storage-size\n   Persistence storage size. Use \"100Gi\" by default.\n   --caching-storage-class\n   Caching storage class. Use \"nfs-client\" by default.\n   --caching-storage-size\n   Caching storage size. Use \"100Gi\" by default.\n   --worker-storage-class\n   Worker storage class. Use \"nfs-client\" by default.\n   --worker-storage-size\n   Worker storage size. Use \"100Gi\" by default.\n\nEOF\n}\n\n#Any logic that requires modification of parms based on conditions here\ninit_parameters()\n{\n\n  if [ \"$DV_CUSTOM_RELEASE\" != \"\" ]; then\n    DV_RELEASE=${DV_CUSTOM_RELEASE}\n  else\n    if [ \"${CPD_RELEASE}\" = \"4.0.4\" ] ; then\n       DV_RELEASE=\"4.0.3\"\n     else\n       DV_RELEASE=${CPD_RELEASE}\n     fi\n  fi\n\n  IS_DV=${VALUE_INT_YES}\n\n}\n\n#prints the parameter values that the install will use\nprint_install_parameters(){\n\nlog_info \"General parameters: \"\nlog_info \"Zen Namespace: ${SERVICE_INSTANCE_NAMESPACE}\"\nlog_info \"Zen Operators Namespace: ${ZEN_OPERATORS_NAMESPACE}\"\nlog_info \"CP4D Custom User: ${CP4D_WEB_URL_USERNAME}\"\nlog_info \"CP4D iamIntegration is set to ${IAMINTEGRATION}\"\necho\n\necho\nlog_info \"Version/Tag parameters : \"\noc get ibmcpd ibmcpd-cr -n ${SERVICE_INSTANCE_NAMESPACE} -o yaml | grep ' zenOperatorBuildNumber: '\n\nlog_info \"CPD Release Version  : ${CPD_RELEASE}\"\nlog_info \"DV Release Version  : ${DV_RELEASE}\"\n\necho\n#print dv specific parameters\n\nlog_info \"Number of worker pods: ${NUMBER_OF_WORKERS}\"\nlog_info \"Requested memory size: ${MEMORY_REQUEST_SIZE}\"\nlog_info \"Requested CPU size: ${CPU_REQUEST_SIZE}\"\nlog_info \"Persistence Storage Class: ${PERSISTENCE_STORAGE_CLASS}\"\nlog_info \"Persistence Storage Size: ${PERSISTENCE_STORAGE_SIZE}\"\nlog_info \"Caching Storage Class: ${CACHING_STORAGE_CLASS}\"\nlog_info \"Caching Storage Size: ${CACHING_STORAGE_SIZE}\"\nlog_info \"Worker Storage Class: ${WORKER_STORAGE_CLASS}\"\nlog_info \"Worker Storage Size: ${WORKER_STORAGE_SIZE}\"\n\necho\n} #end of print_install_parameters\n\n#Helper Functions\nexists()\n{\n  if command -v $1 &> /dev/null ; then\n    return\n  fi\n\n  if [ -f $1 ]; then\n    return\n  fi\n  false\n}\n\nget_dv_version(){\n  cpd_release=${DV_RELEASE}\n  if [[ \"$cpd_release\" == \"4.0.0\" ]]; then\n    echo '1.7.0'\n  elif [[ \"$cpd_release\" == \"4.0.1\" ]]; then\n    echo '1.7.1'\n  elif [[ \"$cpd_release\" == \"4.0.2\" ]]; then\n    echo '1.7.2'\n  elif [[ \"$cpd_release\" == \"4.0.3\" ]]; then\n    echo '1.7.3'\n  elif [[ \"$cpd_release\" == \"4.0.4\" ]]; then\n    echo '1.7.3'\n  elif [[ \"$cpd_release\" == \"4.0.5\" ]]; then\n    echo '1.7.5'\n  else\n    echo '1.7.3'\n  fi\n}\n\nget_dv_service_version(){\n   local dv_service_version=$(oc -n ${SERVICE_INSTANCE_NAMESPACE} get dvservice dv-service-cr -o jsonpath=\"{.spec.version}\")\n   echo $dv_service_version\n}\n\n#create the dv provisioner role\nibm_dv_provisioner_role(){\n\n   log_info \"Create DV provisioner role\"\n   oc apply -f /scripts/ibm_dv_provisioner_role.yaml 2>&1\n\n} #end of ibm_dv_provisioner_role\n\n#create the ibm dv provisioner rolebinding\nibm_dv_provisioner_rolebinding(){\n\n    log_info \"Create DV provisioner role binding\"\n    oc apply -f /scripts/ibm_dv_provisioner_rolebinding.yaml 2>&1\n\n} #end of ibm_dv_provisioner_rolebinding\n\n#create the jwt token:https://cloud.ibm.com/apidocs/cloud-pak-data\n#to decode the jwt token use https://www.base64decode.org/\ncreate_jwt_token(){\n\n   COOKIE_FILE=\"${SERVICE_INSTANCE_NAMESPACE}.bigsql.cookie\"\n   COOKIE_FILE_PATH=\"${CMDDIR}/${COOKIE_FILE}\"\n   log_info \"The cookie file path is ${COOKIE_FILE_PATH}\"\n   log_info \"The CP4D WEB URL is ${CP4D_WEB_URL}\"\n\n   #Delete existing cookie file\n   log_info \"Delete existing cookie file\"\n   rm -f ${COOKIE_FILE}\n\n   isIAMEnabled=$(oc get ibmcpd ibmcpd-cr -n ${SERVICE_INSTANCE_NAMESPACE} -o jsonpath={.spec.iamIntegration})\n\n   if [[ $isIAMEnabled == \"true\" ]]\n    then\n      platform_auth_namespace=\"ibm-common-services\"\n      cp4dPassword=$(oc -n $platform_auth_namespace get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode)\n      log_info \"\"\n      log_info \"IAM is enabled, using admin password: $cp4dPassword\"\n      log_info \"\"\n\t  #Get I am Access token\n\t  route1=`oc get route --no-headers --namespace $platform_auth_namespace | grep cp-console |  awk '{print $2}'`\n\t  PRETOKEN1=`curl -sSk --request POST --url https://${route1}/idprovider/v1/auth/identitytoken -d \"grant_type=password&username=admin&password=${cp4dPassword}&scope=openid\"`\n\t  pretoken=`echo $PRETOKEN1 | tr \",\" \"\\n\" | grep access_token | cut -c18- | rev | cut -c2- | rev`\n\t  #Use above token to genearte zen token\n\t  TOKEN=`curl -sSk --request GET --url https://${CP4D_WEB_URL}/v1/preauth/validateAuth --header \"username: admin\" --header \"iam-token: $pretoken\"`\n\t  token=`echo $TOKEN | tr \",\" \"\\n\" | grep accessToken  | tail -n1 | cut -c16- | rev | cut -c2- | rev`\n  else\n     log_info \"IAM is disabled, using admin password: password\"\n     payload=\"{\\\"username\\\":\\\"${CP4D_WEB_URL_USERNAME}\\\",\\\"password\\\":\\\"${CP4D_WEB_URL_PASSWORD}\\\"}\"\n     log_info \"The JWT token paylod is ${payload}\"\n\n     log_info \"Generating the JWT token\"\n     #this generates a token;\n     curl -v -c ${COOKIE_FILE_PATH} \"https://${CP4D_WEB_URL}/v1/preauth/signin?context=${SERVICE_INSTANCE_NAMESPACE}\" -H \"Origin: https://${CP4D_WEB_URL}\" -H \"Accept-Encoding: gzip, deflate, br\" -H \"Accept-Language: en-US,en;q=0.9\" -H \"User-Agent: Mozilla/5.0\" -H \"Content-Type: application/json;charset=UTF-8\" -H \"Accept: application/json, text/plain, */*\" -H \"Referer: https://${CP4D_WEB_URL}/${SERVICE_INSTANCE_NAMESPACE}/\" -H \"Cookie: __preloginurl__=/${SERVICE_INSTANCE_NAMESPACE}/\" -H \"Connection: keep-alive\" -d \"${payload}\" --compressed --insecure\n\n     log_info \"Wait for 10 sec to get the JWT token\"\n     sleep 10s\n\n     #store the token\n     token=`awk '{for (I=1;I<=NF;I++) if ($I == \"ibm-private-cloud-session\") {print $(I+1)};}' ${COOKIE_FILE_PATH}`\n\n  fi\n\n} #end of create_jwt_token\n\n#check dv head pod status\n#Check using new bigsql CRD\ncheck_dv_head_pod_status(){\n\n   log_info \"Waiting for DV head pod to start running\"\n\n   #Wait until the head pod is in 1/1 state & running\n   opNotReady=1; iter=0; maxIter=60\n   while [ $opNotReady -eq 1 ] && [ $iter -le $maxIter ]; do\n      [ $(oc get pod -n $SERVICE_INSTANCE_NAMESPACE --no-headers=true -l component=db2dv,name=dashmpp-head-0,role=db,type=engine | awk '{print $2}' | awk -F'/'  ' BEGIN {count = 0}  $1 == $2 {count++ } END {print count}') -eq 1 ] &&  break\n      oc get pod -n $SERVICE_INSTANCE_NAMESPACE --no-headers=true -l component=db2dv,name=dashmpp-head-0,role=db,type=engine\n      [ $(oc get pod -n $SERVICE_INSTANCE_NAMESPACE | grep c-dv | grep Error | wc -l) -gt 0 ] &&  { log_fatal \"At least 1 DV  Pod is in error state, failing the provisioning now.\" ; exit 1; }\n      log_info \"Waiting for DV Head Pod to become ready.. ($iter / $maxIter)\"\n      let iter=iter+1; sleep 20;\n   done\n\n   [ $iter -eq $maxIter ] && { log_warning \"Maximum iteration has been reached and DV Head Pod still not running and 1/1, exit\" ; exit 1; }\n\n    log_info \"DV head pod ready & running\"\n\n}\n\n#check dv worker pod status\n#Check using new bigsql CRD\ncheck_dv_worker_pod_status(){\n\n   log_info \"Waiting for DV worker pod to start running\"\n\n   #Wait until the worker pod is in 1/1 state & running\n   opNotReady=1; iter=0; maxIter=60\n   while [ $opNotReady -eq 1 ] && [ $iter -le $maxIter ]; do\n      [ $(oc get pod -n $SERVICE_INSTANCE_NAMESPACE --no-headers=true -l component=db2dv,name\\!=dashmpp-head-0,role=db,type=engine | awk '{print $2}' | awk -F'/'  ' BEGIN {count = 0}  $1 == $2 {count++ } END {print count}') -eq ${NUMBER_OF_WORKERS} ] &&  break\n      oc get pod -n $SERVICE_INSTANCE_NAMESPACE --no-headers=true -l component=db2dv,name!=dashmpp-head-0,role=db,type=engine\n      [ $(oc get pod -n $SERVICE_INSTANCE_NAMESPACE | grep c-dv | grep Error | wc -l) -gt 0 ] &&  { log_fatal \"At least 1 DV pod is in error state, failing the provisioning now.\" ; exit 1; }\n      log_info \"Waiting for required DV Worker Pods(${NUMBER_OF_WORKERS}) to become ready.. ($iter / $maxIter)\"\n      let iter=iter+1; sleep 20;\n   done\n\n   [ $iter -eq $maxIter ] && { log_warning \"Maximum iteration has been reached and DV Workers Pods still not running and 1/1, exit\" ; exit 1; }\n\n   log_info \"DV worker pod(s) ready & running\"\n\n}\n\n#check dv is ready to use\ncheck_dv_ready_state(){\n\n      log_info \"DV Readiness Check\"\n\n      dvenginePod=$(oc get pod -n $SERVICE_INSTANCE_NAMESPACE --no-headers=true -l component=db2dv,name=dashmpp-head-0,role=db,type=engine | awk '{print $1}')\n      log_info \"DV engine head pod is $dvenginePod\"\n\n       #Wait until the DV service is  ready\n      dvNotReady=1; iter=0; maxIter=120 #DV takes longer than BigSQL to become ready\n      while [ $dvNotReady -eq 1 ] && [ $iter -le $maxIter ]; do\n         oc logs -n $SERVICE_INSTANCE_NAMESPACE $dvenginePod | grep \"db2uctl markers get QP_START_PERFORMED\" > /dev/null\n         dvNotReady=$?\n         if [ $dvNotReady -eq 0 ]; then\n            break\n         else\n            log_info \"Waiting for the DV service to be ready. Recheck in 30 seconds\"\n            let iter=iter+1; sleep 30\n         fi\n      done\n\n      if [ $dvNotReady -eq 1 ]; then\n         log_info \"The container logs are:\"\n         oc logs -n $SERVICE_INSTANCE_NAMESPACE $bigsqlenginePod | tail -300\n         log_error \"DV service is still not ready after waiting for $maxIter intervals of 30 seconds\"\n         exit 1\n      else\n         echo \"[INFO] DV service is ready... [current check is phrase -> db2uctl markers get SETUP_COMPLETE]\"\n      fi\n}\n\n#We do not use this by default because DV validation script waits and checks if DV pods are running\ncheck_dv_provision(){\n\n   log_info \"Check DV provisioning, this operation may take some time.. \"\n   #wait for head pod to run\n   check_dv_head_pod_status\n   check_dv_worker_pod_status\n   check_dv_ready_state\n\n   echo -e \"\\e[1;42m DV  PROVISIONING COMPLETED  \\e[0m\"\n\n   log_info \"OpenShift version:\"\n   oc version\n   log_info \"cloudctl version:\"\n   ./${CLOUDCTLEXEC} version\n   log_info \"lite version\"\n   oc get zenservice lite-cr -n $SERVICE_INSTANCE_NAMESPACE -o yaml | grep ' zenOperatorBuildNumber: '\n\n   #v3 api to fetch instances\n   log_info \"Listing all provisioned cp4d instances\"\n   create_jwt_token\n   curl -k -v -H \"Authorization: Bearer ${token}\" -X GET https://${CP4D_WEB_URL}/zen-data/v3/service_instances\n\n} #End of get_installed_versions\n\nget_timestamp(){\n  local pretty_print=\"${1:-$VALUE_INT_YES}\"\n  if [ $pretty_print -eq $VALUE_INT_YES ]; then\n     #Default to pretty print for logging\n     echo \"[\"$(date -u +\"%H:%M:%S,%3N %Z\")\"]\"\n  else\n     #\"2021040319h45m09s\" style to be used in file names\n     echo $(date \"+%Y%m%d%Hh%Mm%Ss\")\n  fi\n}\n\ntrim_spaces()\n{\n    local ENTRIES=\"$@\"\n    result=$(echo \"$ENTRIES\" | sed -e 's/^ *//' -e 's/ *$//')\n    echo $result\n}\n\n#Provision DV via Zen core REST API\nprovision_dv(){\n   local dv_instance_version=$(get_dv_version) #default to 1.7.1, once we switch to CP4D River 4.0.2, default will move up to 1.7.2\n   local dv_service_version=$(get_dv_service_version)\n\n   if [ -z \"${dv_service_version}\" ]; then\n      log_warning \"Unable to get DV service version. Use default DV instance version instead ${dv_instance_version}\"\n   else\n      if [ \"${dv_service_version}\" != \"${dv_instance_version}\" ]; then\n         log_warning \"DV service version ${dv_service_version} is different from expected DV instance version ${dv_instance_version}\"\n         log_warning \"Provision DV instance version using DV service version ${dv_service_version} instead\"\n         dv_instance_version=${dv_service_version}\n      fi\n   fi\n\n   log_info \"Provision DV instance version ${dv_instance_version}\"\n\n   #check DV and db2u crds\n   oc get crd | grep -i bigsqls.db2u.databases.ibm.com\n   if [[ $? -ne 0 ]]; then\n      log_error \"DV/db2u CRD bigsqls.db2u.databases.ibm.com missing\"\n      exit 1\n   fi\n\n   oc get crd | grep -i db2uclusters.db2u.databases.ibm.com\n   if [[ $? -ne 0 ]]; then\n      log_error \"DV/db2u CRD db2ucluster.db2u.databases.ibm.com missing\"\n      exit 1\n   fi\n\n   log_info \"Wait for stabilization\"\n   sleep 120s\n\n   local current_timestamp=$(get_timestamp $VALUE_INT_NO) #print a \"ugly\" timestamp like \"2021040319h45m09s\"\n   log_info \"Current Timestamp: $current_timestamp\"\n\n   #create the jwt token:https://cloud.ibm.com/apidocs/cloud-pak-data\n   create_jwt_token\n   log_info \"The jwt token is ${token}\"\n   sleep 10s\n\n   if [ \"${token}\" == \"\" ]; then\n       log_fatal \"JWT token is not generated \"\n       log_fatal \"\"\n       exit 1\n   fi\n\n   NUMBER_OF_WORKERS=$(trim_spaces \"${NUMBER_OF_WORKERS}\")\n\n   MEMORY_REQUEST_SIZE=$(trim_spaces \"${MEMORY_REQUEST_SIZE}\")\n   CPU_REQUEST_SIZE=$(trim_spaces \"${CPU_REQUEST_SIZE}\")\n\n   PERSISTENCE_STORAGE_CLASS=$(trim_spaces \"${PERSISTENCE_STORAGE_CLASS}\")\n   PERSISTENCE_STORAGE_SIZE=$(trim_spaces \"${PERSISTENCE_STORAGE_SIZE}\")\n\n   WORKER_STORAGE_CLASS=$(trim_spaces \"${WORKER_STORAGE_CLASS}\")\n   WORKER_STORAGE_SIZE=$(trim_spaces \"${WORKER_STORAGE_SIZE}\")\n\n   CACHING_STORAGE_CLASS=$(trim_spaces \"${CACHING_STORAGE_CLASS}\")\n   CACHING_STORAGE_SIZE=$(trim_spaces \"${CACHING_STORAGE_SIZE}\")\n\n   log_info \"Update DV provisioning parameters\"\n   #Update newdv.json\n\n   local current_json=\"$(echo $DV_INSTALL_JSON_FILE_PATH | sed \"s/.json//\").$current_timestamp.json\"\n   log_info \"Provision DV via Zen core API with payload $current_json\"\n   cp \"${MNTDIR}/${DV_INSTALL_JSON_FILE_PATH}\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV instance version\"\n   sed -i \"s/\\\"addon_version\\\": \\\"1.7.0\\\"/\\\"addon_version\\\": \\\"${dv_instance_version}\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV service instance namespace\"\n   sed -i \"s/\\\"namespace\\\": \\\"zen\\\"/\\\"namespace\\\": \\\"${SERVICE_INSTANCE_NAMESPACE}\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV requested memory size\"\n   sed -i \"s/\\\"resources.dv.requests.memory\\\": \\\"8Gi\\\"/\\\"resources.dv.requests.memory\\\": \\\"${MEMORY_REQUEST_SIZE}\\\"/g\" \"${CMDDIR}/${current_json}\"\n   sed -i \"s/\\\"memory\\\": \\\"8\\\"/\\\"memory\\\": \\\"$(echo ${MEMORY_REQUEST_SIZE} | sed \"s/Gi//g\")\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV requested cpu size\"\n   sed -i \"s/\\\"resources.dv.requests.cpu\\\": \\\"4\\\"/\\\"resources.dv.requests.cpu\\\": \\\"${CPU_REQUEST_SIZE}\\\"/g\" \"${CMDDIR}/${current_json}\"\n   sed -i \"s/\\\"cpu\\\": \\\"4\\\"/\\\"cpu\\\": \\\"${CPU_REQUEST_SIZE}\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV persistence storage class\"\n   sed -i \"s/\\\"persistence.storageClass\\\": \\\"nfs-client\\\"/\\\"persistence.storageClass\\\": \\\"${PERSISTENCE_STORAGE_CLASS}\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV persistence storage size\"\n   sed -i \"s/\\\"persistence.size\\\": \\\"100Gi\\\"/\\\"persistence.size\\\": \\\"${PERSISTENCE_STORAGE_SIZE}\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV caching storage class\"\n   sed -i \"s/\\\"persistence.cachingpv.storageClass\\\": \\\"nfs-client\\\"/\\\"persistence.cachingpv.storageClass\\\": \\\"${CACHING_STORAGE_CLASS}\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV caching storage size\"\n   sed -i \"s/\\\"persistence.cachingpv.size\\\": \\\"100Gi\\\"/\\\"persistence.cachingpv.size\\\": \\\"${CACHING_STORAGE_SIZE}\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV worker storage class\"\n   sed -i \"s/\\\"persistence.workerpv.storageClass\\\": \\\"nfs-client\\\"/\\\"persistence.workerpv.storageClass\\\": \\\"${WORKER_STORAGE_CLASS}\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   log_info \"Update DV worker storage size\"\n   sed -i \"s/\\\"persistence.workerpv.size\\\": \\\"100Gi\\\"/\\\"persistence.workerpv.size\\\": \\\"${WORKER_STORAGE_SIZE}\\\"/g\" \"${CMDDIR}/${current_json}\"\n\n   #We do not need to add one more pod because it's handled in dv-cr.yaml CR template\n   #i.e size: {{ add .parameters.workerCount 1 }}\n   log_info \"Update DV Number of Workers\"\n   sed -i \"s|\\\"workerCount\\\": \\\"1\\\"|\\\"workerCount\\\": \\\"${NUMBER_OF_WORKERS}\\\"|g\" \"${CMDDIR}/${current_json}\"\n\n   #Provision\n   log_info \"Provision DV instance\"\n   cat \"${CMDDIR}/${current_json}\"\n\n   #v3 api\n   if [[ $isIAMEnabled == \"true\" ]]\n    then\n     curl -v -k -H \"Authorization: Bearer $token\"  -H \"Content-Type: application/json\" -X POST https://${CP4D_WEB_URL}/zen-data/v3/service_instances -T \"${CMDDIR}/${current_json}\" -H \"jwt-auth-user-payload: {\\\"accessToken\\\": \\\"$token\\\"}\"\n    else\n      curl -v -k -H \"Content-Type: application/json\" -b ${COOKIE_FILE_PATH}  -X POST https://${CP4D_WEB_URL}/zen-data/v3/service_instances -T \"${CMDDIR}/${current_json}\"\n   fi\n\n   #This impacts newer OC 4.6.xxx, 4.7 and 4.8 clusters\n   #A real fix should be from db2u but for now, we work around it by disabling tty\n   #https://ibm-analytics.slack.com/archives/C019EJ0QH4Y/p1626098470003300?thread_ts=1625244478.403600&cid=C019EJ0QH4Y\n   #https://github.ibm.com/DB2/tracker/issues/12051#issuecomment-33324336\n   log_info \"Waiting for DV statefulset c-db2u-dv-db2u to be created in order to disable tty check\"\n   opNotReady=1; iter=0; maxIter=60\n   while [ $opNotReady -eq 1 ] && [ $iter -le $maxIter ]; do\n     oc get sts c-db2u-dv-db2u\n     if [[ $? -eq 0 ]] ; then\n       log_info \"Patch DV statefulset c-db2u-dv-db2u with tty workaround\"\n       oc --namespace ${SERVICE_INSTANCE_NAMESPACE} patch sts c-db2u-dv-db2u -p='{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"db2u\",\"tty\":false}]}}}}}'\n       break\n     else\n       log_info \"Waiting for statefulset c-db2u-dv-db2u to be created by db2u operator.. ($iter / $maxIter)\"\n       let iter=iter+1; sleep 30;\n     fi\n   done\n\n   if [ \"$PERSISTENCE_STORAGE_CLASS\" == *\"ocs\"* ]; then\n      log_info \"PERSISTENCE_STORAGE_CLASS $PERSISTENCE_STORAGE_CLASS is OCS\"\n      log_info \"Need to check if workers are looping for /mnt/blumeta0/home/db2inst1/hosts/.joined_to_cluster\"\n      opNotReady=1; iter=0; maxIter=240\n      while [ $opNotReady -eq 1 ] && [ $iter -le $maxIter ]; do\n      oc --namespace ${SERVICE_INSTANCE_NAMESPACE} logs c-db2u-dv-db2u-0 | grep 'Not all workers have /mnt/blumeta0/home/db2inst1/hosts/.joined_to_cluster' 2>&1 > /dev/null\n      if [[ $? -eq 0 ]] ; then\n         log_info \"DV is looping at checking /mnt/blumeta0/home/db2inst1/hosts/.joined_to_cluster\"\n         oc --namespace ${SERVICE_INSTANCE_NAMESPACE} exec -it c-db2u-dv-db2u-0 -- su - db2inst1 -c \"/usr/ibmpacks/current/bigsql/bigsql/bigsql-cli/BIGSQL/package/scripts/bigsqlPexec.sh -w -c 'touch /mnt/blumeta0/home/db2inst1/hosts/.joined_to_cluster'\"\n         break\n      else\n         oc --namespace ${SERVICE_INSTANCE_NAMESPACE} logs c-db2u-dv-db2u-0 | grep '/mnt/blumeta0/home/db2inst1/hosts/.joined_to_cluster exists' 2>&1 > /dev/null\n         if [[ $? -eq 0 ]] ; then\n            log_info \"/mnt/blumeta0/home/db2inst1/hosts/.joined_to_cluster exists\"\n            break\n         else\n            log_info \"Waiting for BigSQL workers to join head c-db2u-dv-db2u-0 .. ($iter / $maxIter)\"\n            let iter=iter+1; sleep 30;\n         fi\n      fi\n      done\n\n      log_info \"Need to check if workers are looping for /mnt/blumeta0/home/db2inst1/hosts/.registeredHeadCID\"\n      opNotReady=1; iter=0; maxIter=240\n      while [ $opNotReady -eq 1 ] && [ $iter -le $maxIter ]; do\n      oc --namespace ${SERVICE_INSTANCE_NAMESPACE} logs c-db2u-dv-db2u-0 | grep 'Not all workers have the same' 2>&1 > /dev/null\n      if [[ $? -eq 0 ]] ; then\n         log_info \"DV is looping at checking /mnt/blumeta0/home/db2inst1/hosts/.registeredHeadCID\"\n         current_cid=$(oc --namespace ${SERVICE_INSTANCE_NAMESPACE} exec -it c-db2u-dv-db2u-0 -- bash -c \"cat /mnt/blumeta0/home/db2inst1/hosts/.registeredHeadCID\")\n         log_info \"Current CID: $current_cid\"\n         oc --namespace ${SERVICE_INSTANCE_NAMESPACE} exec -it c-db2u-dv-db2u-0 -- su - db2inst1 -c \"/usr/ibmpacks/current/bigsql/bigsql/bigsql-cli/BIGSQL/package/scripts/bigsqlPexec.sh -w -c \\\"echo $current_cid > /mnt/blumeta0/home/db2inst1/hosts/.registeredHeadCID\\\"\"\n         break\n      else\n         oc --namespace ${SERVICE_INSTANCE_NAMESPACE} logs c-db2u-dv-db2u-0 | grep 'All workers have the same' 2>&1 > /dev/null\n         if [[ $? -eq 0 ]] ; then\n            log_info \"All workers have the same /mnt/blumeta0/home/db2inst1/hosts/.registeredHeadCID\"\n            break\n         else\n            log_info \"Waiting for BigSQL workers to join head c-db2u-dv-db2u-0 .. ($iter / $maxIter)\"\n            let iter=iter+1; sleep 30;\n         fi\n      fi\n      done\n   fi\n\n   log_info \"DV instance provision submitted. Check ICP4D web console for provision status\"\n   check_dv_provision\n   log_info \"DV instance provisioning successful\"\n}\n\nlog_entry(){\n   echo \"$(get_timestamp) $1\"\n}\n\nlog_info(){\n   log_entry \"[INFO] $1\"\n}\n\nlog_error(){\n   log_entry \"[ERROR] $1\"\n}\n\nlog_fatal(){\n   log_entry \"[FATAL] $1\"\n}\n\nlog_warning(){\n   log_entry \"[WARNING] $1\"\n}\n\n#################################\n# Main starts here\n#################################\n\n#Common functions/tasks\ninit_parameters\nprint_install_parameters\n\n#Actions for lite operator, lite CR\nlog_info \"Patch for dmc build after 248..\"\ncsvInjector=$(oc get namespacescope common-service  -n ${ZEN_OPERATORS_NAMESPACE} -o jsonpath='{.spec.csvInjector.enable}')\nif [ \"${csvInjector}\" = \"false\" ] ; then\n oc patch namespacescope common-service --type='json' -p='[{\"op\":\"replace\", \"path\": \"/spec/csvInjector/enable\", \"value\":true}]' -n ${ZEN_OPERATORS_NAMESPACE}\nfi\nlog_info \"Patch for dmc build after 248  Done\"\n\nibm_dv_provisioner_role\nibm_dv_provisioner_rolebinding\nprovision_dv\n"
  ibm_dv_provisioner_role.yaml: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      labels:
        app.kubernetes.io/component: addon
        app.kubernetes.io/instance: dv
        app.kubernetes.io/managed-by: ibm-dv-operator
        app.kubernetes.io/name: dv
      name: ibm-dv-provisioner-role
    rules:
    - apiGroups:
      - db2u.databases.ibm.com
      resources:
      - bigsqls
      - db2uclusters
      - dvs
      verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
  ibm_dv_provisioner_rolebinding.yaml: |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      labels:
        app.kubernetes.io/component: operator
        app.kubernetes.io/instance: dv
        app.kubernetes.io/managed-by: ibm-dv-operator
        app.kubernetes.io/name: dv
      name: ibm-dv-provisioner-rolebinding
    subjects:
    - kind: ServiceAccount
      name: zen-editor-sa
    roleRef:
      kind: Role
      name: ibm-dv-provisioner-role
      apiGroup: rbac.authorization.k8s.io
  newdv.json: |
    {
      "addon_type": "dv",
      "display_name": "data-virtualization",
      "namespace": "zen",
      "addon_version": "1.7.0",
      "create_arguments": {
        "parameters": {
          "enableHostIPC": "false",
          "resources.dv.requests.memory": "8Gi",
          "image.pullPolicy": "IfNotPresent",
          "persistence.cachingpv.storageClass": "nfs-client",
          "persistence.cachingpv.size": "100Gi",
          "persistence.size": "100Gi",
          "persistence.workerpv.storageClass": "nfs-client",
          "persistence.workerpv.size": "100Gi",
          "persistence.storageClass": "nfs-client",
          "resources.dv.requests.cpu": "4",
          "workerCount": "1"
        },
        "resources": {
          "cpu": "4",
          "memory": "8"
        },
        "description": "Data Virtualization",
        "metadata": {
          "sample": "data"
        }
      },
      "transient_fields": {}
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: dv-provision-cm
